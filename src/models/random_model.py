from models.model import Model
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam
import numpy as np

class RandomModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # very similar to transfered_model.py, the only difference is that you should randomize the weights
        # load your basic model with keras's load_model function
        _model = Model.load_model("results/optimized_network.keras").model
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        for layer in _model.layers:
            layer.trainable = False
        # randomize the weights of the loaded model, possibly by using _randomize_layers
        RandomModel._randomize_layers(_model)
        # use this model by removing the last layer, adding dense layers and an output layer
        _model.pop()
        _model.add(layers.Dense(16, activation='relu', kernel_initializer='he_uniform'))
        _model.add(layers.Dense(categories_count, activation='softmax'))
        self.model = _model
    
    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup
        self.model.compile(
            optimizer=RMSprop(learning_rate=0.001),
            loss='categorical_crossentropy',
            metrics=['accuracy'],
        )

    @staticmethod
    def _randomize_layers(model):
        # Your code goes here
        # you can write a function here to set the weights to a random value
        # use this function in _define_model to randomize the weights of your loaded model
        for layer in model.layers:
            if (len(layer.get_weights()) > 0):
                weights, biases = layer.get_weights()
                randomized_weights = np.random.rand(*weights.shape)
                randomized_biases = np.random.rand(*biases.shape)
                layer.set_weights([randomized_weights, randomized_biases])
        return

